# 내가 구한 답의 알고리즘의 BigO(n) 10e9 이상이라면 답이 아니다.
# 최대 10e8 정도

# 커다란 공연장을 빌려서 록 페스티벌을 개최하려고 합니다. 
# 이 페스티벌은 여러 날 동안 진행되며, 하루에 한 팀의 밴드가 공연장에서 콘서트를 하게 됩니다. 
# 전체 밴드를 몇 팀 섭외할 지는 아직 결정하지 않았지만, 페스티벌의 간판 스타인 L개의 팀은 이미 섭외가 끝난 상태입니다. 
# 따라서 페스티벌은 최소 L일 이상 진행하게 됩니다.
# 이번에 사용할 공연장은 하루 빌리는 데 드는 비용이 매일 매일 다릅니다. 때문에 공연 일정을 잘 정해서 공연장 대여 비용을 줄이려고 합니다. 
# 앞으로 N일간의 공연장 대여 비용을 알고 있다고 합시다. 
# 이 중 L일 이상을 연속해서 대여하되, 공연장을 하루 빌리는 데 드는 평균 비용을 최소화하려면 어떻게 공연장을 빌려야 할까요?

# 예를 들어 앞으로 6일간 공연장을 빌리는 데 드는 비용이 각 {3, 1, 2, 3, 1, 2}라고 합시다. 
# 이미 세 팀을 섭외했다고 하면, 3일 대신 4일 동안 공연을 진행해서 평균 비용을 더 저렴하게 할 수 있습니다. 
# 3일 동안의 평균 대여 비용을 최소화하는 방법은 2일째부터 4일째까지 공연장을 대여하는 것인데, 이 때 하루 평균 (1+2+3)/3 = 2의 비용이 듭니다. 
# 반면 2일째부터 5일째까지 공연장을 대여하면 평균 비용이 (1+2+3+1)/4 = 7/4밖에 되지 않습니다.

# Sij
# Answer = min(Sij/j-i)
# Sij = Sj - Si -> 누적합사용

def solution(C):
    for _ in range(C):
        res = pow(10,9)
        
        N, L = map(int, input().split(' '))

        costs = list(map(int,input().split(' ')))

        누적합 = []
        누적합.append(costs[0])

        # O(n)
        for i in range(1,len(costs)):
            누적합.append(누적합[i-1]+costs[i])
        
        for i in range(len(costs)):
            for j in range(len(costs)):
                if j-i+1 >= L:
                    if i != 0:
                        res = min(res,(누적합[j]- 누적합[i-1])/(j-i+1))
                    else:
                        res = min(res, 누적합[j] / (j+1))
        
        print(res)

solution(2)